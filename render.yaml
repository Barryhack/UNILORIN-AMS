services:
  - type: web
    name: attendance-system
    env: python
    buildCommand: |
      pip install -r requirements.txt
      export FLASK_APP=wsgi.py
      python -c "
      import os
      from app import create_app
      from app.extensions import db
      from app.models import User, Course, Department, Attendance, CourseStudent, LoginLog, ActivityLog, Notification, Lecture
      from config import ProductionConfig
      
      app = create_app(ProductionConfig)
      with app.app_context():
          # Drop all tables
          print('Dropping all tables...')
          db.drop_all()
          db.session.commit()
          
          # Create all tables
          print('Creating all tables...')
          db.create_all()
          db.session.commit()
          print('Database tables created successfully')
          
          # Verify tables were created
          from sqlalchemy import inspect
          inspector = inspect(db.engine)
          tables = inspector.get_table_names()
          print(f'Created tables: {tables}')
          
          # Verify users table columns
          columns = [col['name'] for col in inspector.get_columns('users')]
          print(f'Users table columns: {columns}')
          
          if 'login_id' not in columns:
              raise Exception('login_id column is missing from users table')
          
          # Create default department
          dept = Department(name='Computer Science', code='CSC')
          db.session.add(dept)
          db.session.commit()
          print('Default department created')
          
          # Create default admin user
          admin = User(
              login_id='ADMIN001',
              email='admin@example.com',
              first_name='Admin',
              last_name='User',
              role='admin'
          )
          admin.password = 'admin123'
          admin.department_id = dept.id
          db.session.add(admin)
          db.session.commit()
          print('Default admin user created')
          
          # Verify admin user was created
          admin_check = User.query.filter_by(login_id='ADMIN001').first()
          if not admin_check:
              raise Exception('Failed to create admin user')
          print('Admin user verified')
      "
    startCommand: gunicorn wsgi:app --config gunicorn_config.py
    healthCheckPath: /health
    autoDeploy: false
    envVars:
      - key: FLASK_APP
        value: wsgi.py
      - key: FLASK_ENV
        value: production
      - key: PYTHON_VERSION
        value: 3.9.12
      - key: SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: attendance_db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: redis
          type: redis
          property: connectionString
      - key: SERVER_NAME
        value: unilorin-ams-vf9i.onrender.com
      - key: LOG_LEVEL
        value: INFO
      - key: RATELIMIT_STORAGE_URL
        fromService:
          name: redis
          type: redis
          property: connectionString
    disk:
      name: attendance-data
      mountPath: /data
      sizeGB: 1

  - type: redis
    name: redis
    ipAllowList:
      - source: 0.0.0.0/0
        description: everywhere
    plan: free

databases:
  - name: attendance_db
    databaseName: attendance
    plan: free
    ipAllowList:
      - source: 0.0.0.0/0
        description: everywhere
